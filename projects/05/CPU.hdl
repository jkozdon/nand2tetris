// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:

    Not(in=instruction[15], out=ainstr);
    Mux16(a = aluout, b = instruction, sel=ainstr, out=aregin);

    // 15 14 13 12   11 10 09 08   07 06 05 04   03 02 01 00
    //  1  1  1  a _ c1 c2 c3 c4 _ c5 c6 d1 d2 _ d3 j1 j2 j3

    // ainstr || d1 -> aload
    Or(a=ainstr, b=instruction[5], out=aload);
    ARegister(in=aregin, load=aload, out=areg, out[0..14]=addressM);

    // d2 -> dload
    And(a=instruction[4], b=instruction[15], out=dload);
    DRegister(in=aluout, load=dload, out=dreg);

    // Alu input -> a -> areg
    Mux16(a = areg, b=inM, sel=instruction[12], out=aluin);

    ALU(x = dreg, y = aluin, out = outM, out = aluout,
    zx = instruction[11],
    nx = instruction[10],
    zy = instruction[9],
    ny = instruction[8],
    f  = instruction[7],
    no = instruction[6],
    zr = zr,
    ng = ng);

    // out < 0
    And(a=instruction[2], b=ng, out=jmp1);
    // out = 0
    And(a=instruction[1], b=zr, out=jmp2);
    // out > 0  <- not(ng || zr)
    Or(a=zr, b=ng, out=nge);
    Not(in=nge, out=ps);
    And(a=instruction[0], b=ps, out=jmp3);
    // jmp
    Or(a = jmp1, b = jmp2, out = jmp12);
    Or(a = jmp12, b = jmp3, out = jmp123);
    And(a=jmp123, b=instruction[15], out=jmp);

    // Do program counter
    PC(in=areg, load=jmp, inc=true, reset=reset, out[0..14] = pc);

    // Set memory if not A instruction and d3
    And(a=instruction[3], b=instruction[15], out=writeM);

}
